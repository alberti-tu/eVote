{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/app.routes.ts","webpack:///./src/app/certificate/download-certificate/download-certificate.component.css","webpack:///./src/app/certificate/download-certificate/download-certificate.component.html","webpack:///./src/app/certificate/download-certificate/download-certificate.component.ts","webpack:///./src/app/certificate/id-anonimous/id-anonimous.component.css","webpack:///./src/app/certificate/id-anonimous/id-anonimous.component.html","webpack:///./src/app/certificate/id-anonimous/id-anonimous.component.ts","webpack:///./src/app/certificate/login/login.component.css","webpack:///./src/app/certificate/login/login.component.html","webpack:///./src/app/certificate/login/login.component.ts","webpack:///./src/app/certificate/recover-certificate/recover-certificate.component.css","webpack:///./src/app/certificate/recover-certificate/recover-certificate.component.html","webpack:///./src/app/certificate/recover-certificate/recover-certificate.component.ts","webpack:///./src/app/certificate/recover-certificate/snack-bar-component-example-snack.html","webpack:///./src/app/home/home.component.css","webpack:///./src/app/home/home.component.html","webpack:///./src/app/home/home.component.ts","webpack:///./src/app/init/init.component.css","webpack:///./src/app/init/init.component.html","webpack:///./src/app/init/init.component.ts","webpack:///./src/app/models/user.ts","webpack:///./src/app/service/Cryptography/cryptography.service.ts","webpack:///./src/app/service/HttpClient/http-client.service.ts","webpack:///./src/app/service/UserService.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":";;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA,4CAA4C,WAAW;AACvD;AACA;AACA,4E;;;;;;;;;;;ACZA,2BAA2B,mBAAmB,GAAG,SAAS,iBAAiB,GAAG,G;;;;;;;;;;;ACA9E,+QAA+Q,gR;;;;;;;;;;;;;;;;;;;;;ACArO;AAO1C;IAAA;IAA4B,CAAC;IAAhB,YAAY;QALxB,+DAAS,CAAC;YACT,QAAQ,EAAE,UAAU;;;SAGrB,CAAC;OACW,YAAY,CAAI;IAAD,mBAAC;CAAA;AAAJ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACPiC;AACjB;AACI;AAEW;AAET;AACO;AAE4B;AACL;AACvB;AAC2D;AAC5C;AAChC;AACa;AACqC;AACV;AAIlD;AAI8C;AAyBzE;IAAA;IAAyB,CAAC;IAAb,SAAS;QAvBrB,8DAAQ,CAAC;YACR,YAAY,EAAE,CAAE,2DAAY;gBAC1B,mHAAmB;gBACnB,kEAAa,EAAE,kEAAa,EAAE,sGAAoB,EAAE,6HAA4B,EAAE,kFAAc,EAAE,2HAA2B,CAAE;YACjI,OAAO,EAAE,CAAE,uEAAa;gBACtB,qEAAgB;gBAChB,0DAAW;gBACX,oDAAO;gBACP,6FAAuB;gBACvB,iEAAc;gBACd,kEAAe;gBACf,kEAAe;gBACf,gEAAa;gBACb,iEAAc;gBACd,gEAAa;gBACb,mEAAgB;gBAChB,oEAAiB;gBACjB,gEAAa,CAAC;YAChB,SAAS,EAAE,CAAE,8FAAmB,EAAE,yFAAiB,EAAE,iEAAW,CAAE;YAClE,SAAS,EAAE,CAAE,2DAAY,CAAE;YAC3B,eAAe,EAAE,CAAC,mHAAmB,CAAE;SAExC,CAAC;OACW,SAAS,CAAI;IAAD,gBAAC;CAAA;AAAJ;;;;;;;;;;;;;AClDtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAqD;AAED;AACmC;AACwB;AAC5C;AACyC;AAE5G,IAAM,MAAM,GAAW;IACrB;QACE,IAAI,EAAE,EAAE,EAAE,SAAS,EAAE,kEAAa;KACnC;IACD;QACE,IAAI,EAAE,OAAO,EAAE,SAAS,EAAE,iFAAc;KACzC;IACD;QACE,IAAI,EAAE,SAAS,EAAE,SAAS,EAAE,qGAAoB;KACjD;IACD;QACE,IAAI,EAAE,WAAW,EAAE,SAAS,EAAE,6HAA4B;KAC3D;IACD;QACE,IAAI,EAAE,cAAc,EAAE,SAAS,EAAE,0HAA2B;KAC7D;CACF,CAAC;AACK,IAAM,OAAO,GAAG,4DAAY,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;;;;;;;;;;;;ACzBpD,mB;;;;;;;;;;;ACAA,mL;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAkD;AAC6B;AACxC;AAEe;AAEjB;AAMrC;IAEE,sCAAoB,IAAuB,EACvB,WAAwB,EACxB,MAAc;QAFd,SAAI,GAAJ,IAAI,CAAmB;QACvB,gBAAW,GAAX,WAAW,CAAa;QACxB,WAAM,GAAN,MAAM,CAAQ;IAAI,CAAC;IAEvC,+CAAQ,GAAR;QACE,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,WAAW,CAAC,OAAO,EAAE,CAAC;QACvC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACvB,IAAG,CAAC,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,CAAC,IAAI,KAAK,EAAE,EAAE;YACzD,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;SAC5B;IACH,CAAC;IAED,+CAAQ,GAAR;QAEE;;WAEG;QAEH,4EAA4E;QAG5E,IAAI,QAAQ,GAAG,IAAI,CAAC,SAAS,CAAC;YAC5B,eAAe,EAAE,IAAI,CAAC,IAAI,CAAC,aAAa;YACxC,cAAc,EAAE,IAAI,CAAC,IAAI,CAAC,YAAY;YACtC,YAAY,EAAE,IAAI,CAAC,IAAI,CAAC,QAAQ;SACjC,CAAC,CAAC;QAEH,IAAM,IAAI,GAAG,IAAI,IAAI,CAAC,CAAC,QAAQ,CAAC,EAAE,EAAC,IAAI,EAAE,0BAA0B,EAAC,CAAC,CAAC;QACtE,yDAAM,CAAC,IAAI,EAAE,iBAAiB,CAAC,CAAC;IAClC,CAAC;IA/BU,4BAA4B;QALxC,+DAAS,CAAC;YACT,QAAQ,EAAE,0BAA0B;;;SAGrC,CAAC;yCAG0B,yFAAiB;YACV,gEAAW;YAChB,sDAAM;OAJvB,4BAA4B,CAiCxC;IAAD,mCAAC;CAAA;AAjCwC;;;;;;;;;;;;ACZzC,mB;;;;;;;;;;;ACAA,4W;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAkD;AACX;AACwC;AACxC;AACe;AAQtD;IAGE,wBAAwB;IAExB,8BAAoB,MAAc,EACd,IAAuB,EACvB,WAAwB;QAFxB,WAAM,GAAN,MAAM,CAAQ;QACd,SAAI,GAAJ,IAAI,CAAmB;QACvB,gBAAW,GAAX,WAAW,CAAa;QAL5C,SAAI,GAAS,IAAI,iDAAI,EAAE,CAAC;IAOxB,CAAC;IAED,uCAAQ,GAAR;QACE,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,WAAW,CAAC,OAAO,EAAE,CAAC;QACvC,IAAG,CAAC,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,CAAC,IAAI,KAAK,EAAE,EAAE;YACzD,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;SAC5B;IACH,CAAC;IAED,yCAAU,GAAV,UAAW,QAAgB;QAA3B,iBAkBC;QAjBC,oBAAoB;QACpB,4EAA4E;QAC5E,oCAAoC;QACpC,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC,SAAS,CAAC,gBAAM;YAC/C,IAAI,MAAM,EAAE;gBACV,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;gBAEpB,KAAI,CAAC,IAAI,CAAC,QAAQ,GAAG,KAAI,CAAC,IAAI,CAAC,OAAO,CAAE,MAAM,CAAC,QAAQ,EAAE,QAAQ,EAAE,IAAI,CAAC,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;gBACtF,KAAI,CAAC,IAAI,CAAC,UAAU,GAAG,QAAQ,CAAC;gBAEhC,OAAO,CAAC,GAAG,CAAE,KAAI,CAAC,IAAI,CAAC,QAAQ,CAAE,CAAC;gBAElC,KAAI,CAAC,WAAW,CAAC,OAAO,CAAE,KAAI,CAAC,IAAI,CAAE,CAAC;gBACtC,KAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC;aACrC;YACD,oBAAoB;QACtB,CAAC,CAAC,CAAC;IACL,CAAC;IApCU,oBAAoB;QALhC,+DAAS,CAAC;YACT,QAAQ,EAAE,kBAAkB;;;SAG7B,CAAC;yCAM4B,sDAAM;YACR,yFAAiB;YACV,gEAAW;OAPjC,oBAAoB,CAsChC;IAAD,2BAAC;CAAA;AAtCgC;;;;;;;;;;;;ACZjC,mB;;;;;;;;;;;ACAA,ohB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAkD;AACX;AACwC;AACzB;AAEf;AAQvC;IAIE,wBAAoB,MAAc,EACd,IAAuB,EACvB,WAAwB;QAFxB,WAAM,GAAN,MAAM,CAAQ;QACd,SAAI,GAAJ,IAAI,CAAmB;QACvB,gBAAW,GAAX,WAAW,CAAa;QAJ5C,SAAI,GAAS,IAAI,iDAAI,EAAE,CAAC;IAKxB,CAAC;IAED,iCAAQ,GAAR,cAAa,CAAC;IAEd,8BAAK,GAAL,UAAM,KAAa,EAAE,QAAgB;QAArC,iBAwBC;QAvBC,IAAI,CAAC,IAAI,CAAC,IAAI,GAAG,KAAK,CAAC;QACvB,IAAI,CAAC,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;QAC9B,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,SAAS,CAAC,UAAM,QAAQ;;;;;wBACjD,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;wBACtB,IAAI,CAAC,IAAI,GAAG,QAAQ,CAAC,QAAQ,CAAC;wBAC9B,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;6BACpB,EAAC,IAAI,CAAC,IAAI,CAAC,aAAa,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,GAAhD,wBAAgD;wBACvC,qBAAM,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE;;wBAA7B,CAAC,GAAG,SAAyB;wBACnC,IAAI,CAAC,IAAI,CAAC,YAAY,GAAG,CAAC,CAAC,EAAE,CAAC;wBAC9B,IAAI,CAAC,IAAI,CAAC,aAAa,GAAG,CAAC,CAAC,EAAE,CAAC;;;wBAEjC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;wBACvB,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;wBACpC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;wBACnC,4CAA4C;wBAC5C,sCAAsC;wBAEtC,IAAG,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE;4BACrB,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC;yBACxC;6BAAM;4BACL,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC;yBACnC;;;;aACF,CAAC,CAAC;IACL,CAAC;IAnCU,cAAc;QAN1B,+DAAS,CAAC;YACT,QAAQ,EAAE,WAAW;;;SAGtB,CAAC;yCAM4B,sDAAM;YACR,yFAAiB;YACV,gEAAW;OANjC,cAAc,CAoC1B;IAAD,qBAAC;CAAA;AApC0B;;;;;;;;;;;;ACb3B,mB;;;;;;;;;;;ACAA,+U;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAwD;AACF;AAEf;AAE2B;AACa;AAO/E;IAIE,qCAAoB,WAAwB,EACzB,QAAqB,EACpB,IAAuB,EACvB,MAAc;QAHd,gBAAW,GAAX,WAAW,CAAa;QACzB,aAAQ,GAAR,QAAQ,CAAa;QACpB,SAAI,GAAJ,IAAI,CAAmB;QACvB,WAAM,GAAN,MAAM,CAAQ;QAChC,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,WAAW,CAAC,OAAO,EAAE,CAAC;QACvC,IAAG,CAAC,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,CAAC,IAAI,KAAK,EAAE,EAAE;YACzD,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;SAC5B;IACH,CAAC;IAED,8CAAQ,GAAR;IACA,CAAC;IAED,6CAAO,GAAP,UAAQ,QAAgB;QACtB,IAAI,CAAC,IAAI,CAAC,UAAU,GAAG,QAAQ,CAAC;QAChC,IAAM,SAAS,GAAI,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC;QACvC,IAAM,SAAS,GAAG,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,QAAQ,EAAE,SAAS,CAAC,CAAC;QAC7E,OAAO,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;QAGvB,IAAG,CAAC,SAAS,EAAE;YACb,IAAI,CAAC,QAAQ,CAAC,iBAAiB,CAAC,mBAAmB,EAAE;gBACnD,QAAQ,EAAE,KAAK;aAChB,CAAC,CAAC;SACJ;aAAM;YACL,IAAM,UAAU,GAAG,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,aAAa,EAAE,QAAQ,CAAC,CAAC;YAC3E,OAAO,CAAC,GAAG,CAAC,SAAS,EAAE,UAAU,CAAC,CAAC;YACnC,IAAI,CAAC,IAAI,CAAC,aAAa,GAAG,UAAU,CAAC;YACrC,IAAI,CAAC,IAAI,CAAC,YAAY,GAAG,SAAS,CAAC;YACnC,IAAI,CAAC,IAAI,CAAC,QAAQ,GAAG,SAAS,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;YAC5C,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAEpC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC;SACrC;IACH,CAAC;IAtCU,2BAA2B;QALvC,+DAAS,CAAC;YACT,QAAQ,EAAE,yBAAyB;;;SAGpC,CAAC;yCAKiC,gEAAW;YACf,6DAAW;YACd,yFAAiB;YACf,sDAAM;OAPvB,2BAA2B,CAwCvC;IAAD,kCAAC;CAAA;AAxCuC;AAmDxC;IACE,6BAA+C,IAAS;QAAT,SAAI,GAAJ,IAAI,CAAK;IACxD,CAAC;IAFU,mBAAmB;QAT/B,+DAAS,CAAC;YACT,QAAQ,EAAE,mCAAmC;;YAE7C,MAAM,EAAE,CAAC,gEAIR,CAAC;SACH,CAAC;QAEa,uEAAM,CAAC,oEAAkB,CAAC;;OAD5B,mBAAmB,CAG/B;IAAD,0BAAC;CAAA;AAH+B;;;;;;;;;;;;AChEhC,oF;;;;;;;;;;;ACAA,mB;;;;;;;;;;;ACAA,4OAA4O,WAAW,qFAAqF,QAAQ,mB;;;;;;;;;;;;;;;;;;;;;;;;;ACAlS;AAC4B;AAQ9E;IAIE,uBAAqB,IAAuB;QAAvB,SAAI,GAAJ,IAAI,CAAmB;QAI5C,SAAI,GAAQ;YACV,EAAE,EAAE,EAAE,CAAC,EAAE,IAAI,EAAE,SAAS,EAAE;YAC1B,EAAE,EAAE,EAAE,CAAC,EAAE,IAAI,EAAE,gBAAgB,EAAE;YACjC,EAAE,EAAE,EAAE,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE;SACxB,CAAC;IAR+C,CAAC;IAElD,gCAAQ,GAAR,cAAc,CAAC;IAQf,4BAAI,GAAJ,UAAK,OAAe,EAAE,MAAc;QAClC,QAAS,QAAQ,CAAC,MAAM,CAAC,EAAG;YAC1B,KAAK,CAAC;gBAEN,MAAM;YACN,KAAK,CAAC;gBAEN,MAAM;YACN,KAAK,CAAC;gBAEN,MAAM;SACP;IACH,CAAC;IA1BU,aAAa;QANzB,+DAAS,CAAC;YACT,QAAQ,EAAE,UAAU;;;SAGrB,CAAC;yCAM2B,yFAAiB;OAJjC,aAAa,CA2BzB;IAAD,oBAAC;CAAA;AA3ByB;AA8B1B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;KAiCK;;;;;;;;;;;;ACxEL,mB;;;;;;;;;;;ACAA,oKAAoK,0E;;;;;;;;;;;;;;;;;;;;;;;;;ACAlH;AACX;AAOvC;IAEE,uBAAoB,MAAc;QAAd,WAAM,GAAN,MAAM,CAAQ;IAAI,CAAC;IAEvC,gCAAQ,GAAR;IACA,CAAC;IAED,iCAAS,GAAT;QACE,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;IAClC,CAAC;IATU,aAAa;QALzB,+DAAS,CAAC;YACT,QAAQ,EAAE,UAAU;;;SAGrB,CAAC;yCAG4B,sDAAM;OAFvB,aAAa,CAWzB;IAAD,oBAAC;CAAA;AAXyB;;;;;;;;;;;;;ACR1B;AAAA;AAAA;IAAA;IASA,CAAC;IAAD,WAAC;AAAD,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACT0C;AAC3C,aAAa;AACmB;AACA;AACM;AAEN;AAGhC;IASE,6BAAc,IAAY,EAAE,CAAS;QACnC,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,EAAE,GAAG,wCAAM,CAAC,CAAC,CAAC,CAAC;QAEpB,IAAI,CAAC,MAAM,EAAE,CAAC;IAChB,CAAC;4BAdU,mBAAmB;IAgBvB,kCAAc,GAArB,UAAsB,IAAY;QAChC,IAAM,GAAG,GAAG,wCAAM,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;QAC5C,IAAM,GAAG,GAAG,wCAAM,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,GAAG,CAAC,CAAC,CAAC;QAEpC,IAAI,KAAK,CAAC;QACV,GAAG;YACD,KAAK,GAAG,uDAAkB,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;SACtC,QACM,KAAK,CAAC,eAAe,EAAE,KAAK,IAAI,EAAE;QAEzC,OAAO,KAAK,CAAC;IACf,CAAC;IAEM,oCAAM,GAAb;QACE,IAAG,IAAI,CAAC,IAAI,GAAG,GAAG,EAAE;YAClB,OAAO,CAAC,KAAK,CAAC,wDAAwD,CAAC,CAAC;YACxE,OAAO;SACR;QAED,IAAI,EAAE,EAAE,EAAE,CAAC;QACX,GAAG;YACD,EAAE,GAAG,qBAAmB,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,GAAC,CAAC,CAAC,CAAC;YACrD,EAAE,GAAG,qBAAmB,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,GAAC,CAAC,CAAC,CAAC;SACtD,QAAQ,EAAE,CAAC,QAAQ,CAAC,EAAE,CAAC,GAAG,wCAAM,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE;QAE/D,mBAAmB;QACnB,IAAM,GAAG,GAAG,EAAE,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAE,EAAE,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAE,CAAC;QAEtD,IAAI,CAAC,EAAE,GAAG,wCAAM,CAAC,EAAE,CAAC,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;QAClC,IAAI,CAAC,EAAE,GAAG,wCAAM,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;QAEtC,OAAO,CAAC,GAAG,CAAC,wBAAwB,GAAG,IAAI,CAAC,EAAE,CAAC,SAAS,EAAE,GAAG,OAAO,CAAC,CAAC;IACxE,CAAC;IAED,wBAAwB;IACjB,sCAAQ,GAAf;QACE,OAAO,EAAE,CAAC,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC;IACpC,CAAC;IAED,sCAAsC;IAC/B,qCAAO,GAAd,UAAe,CAAC,EAAE,CAAC;QACjB,IAAI,CAAC,CAAC,GAAG,wCAAM,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;QACvB,IAAI,CAAC,CAAC,GAAG,wCAAM,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;QAEvB,OAAO,CAAC,GAAG,CAAC,wCAAwC,CAAC,CAAC;IACxD,CAAC;IAEM,qCAAO,GAAd,UAAe,OAAmB;QAChC,OAAO,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC;IACxC,CAAC;IAEM,qCAAO,GAAd,UAAe,OAAmB;QAChC,OAAO,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,EAAE,IAAI,CAAC,EAAE,CAAC,CAAC;IAC1C,CAAC;IAEM,kCAAI,GAAX,UAAY,OAAmB;QAC7B,OAAO,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,EAAE,IAAI,CAAC,EAAE,CAAC,CAAC;IAC1C,CAAC;IAEM,oCAAM,GAAb,UAAc,OAAmB;QAC/B,OAAO,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC;IACxC,CAAC;IAEM,uCAAS,GAAhB,UAAiB,OAAmB,EAAE,QAAgB;QACpD,IAAM,KAAK,GAAG,mCAAK,CAAC,QAAQ,CAAC,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;QAC7D,IAAM,KAAK,GAAG,mCAAK,CAAC,QAAQ,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;QAC1D,IAAM,KAAK,GAAG,mCAAK,CAAC,QAAQ,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;QAC1D,IAAM,KAAK,GAAG,mCAAK,CAAC,QAAQ,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;QAE1D,IAAI,CAAC,GAAG,wCAAM,CAAC,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,EAAE,EAAE,CAAC,CAAC;QAElD,GAAG;YACD,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;SACd,QAAQ,+CAAU,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC,QAAQ,EAAE,IAAI,GAAG,EAAE;QAElD,OAAO,OAAO,CAAC,QAAQ,CAAE,wCAAM,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,CAAE,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;IAC1E,CAAC;IAEM,yCAAW,GAAlB,UAAmB,OAAmB,EAAE,QAAgB;QACtD,IAAM,KAAK,GAAG,mCAAK,CAAC,QAAQ,CAAC,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;QAC7D,IAAM,KAAK,GAAG,mCAAK,CAAC,QAAQ,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;QAC1D,IAAM,KAAK,GAAG,mCAAK,CAAC,QAAQ,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;QAC1D,IAAM,KAAK,GAAG,mCAAK,CAAC,QAAQ,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;QAE1D,IAAI,CAAC,GAAG,wCAAM,CAAC,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,EAAE,EAAE,CAAC,CAAC;QAElD,GAAG;YACD,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;SACd,QAAQ,+CAAU,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC,QAAQ,EAAE,IAAI,GAAG,EAAE;QAElD,OAAO,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;IACxD,CAAC;IAEM,wCAAU,GAAjB,UAAkB,OAAe,EAAE,QAAgB;QACjD,OAAO,gDAAQ,CAAC,GAAG,CAAC,OAAO,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAC,QAAQ,EAAE,CAAC;IAC5D,CAAC;IAEM,wCAAU,GAAjB,UAAkB,OAAe,EAAE,QAAgB;QACjD,OAAO,gDAAQ,CAAC,GAAG,CAAC,OAAO,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAC,QAAQ,EAAE,CAAC;IAC5D,CAAC;IAEM,yCAAW,GAAlB,UAAmB,OAAe;QAChC,OAAO,6CAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;IAC9C,CAAC;IAEM,yCAAW,GAAlB,UAAmB,OAAe;QAChC,OAAO,6CAAM,CAAC,IAAI,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;IACvD,CAAC;IACM,wCAAU,GAAjB;QACE,OAAO;YACL,EAAE,EAAE,IAAI,CAAC,EAAE,CAAC,QAAQ,CAAC,EAAE,CAAC,GAAE,GAAG,GAAI,IAAI,CAAC,EAAE,CAAC,QAAQ,CAAC,EAAE,CAAC;YACrD,EAAE,EAAE,IAAI,CAAC,EAAE,CAAC,QAAQ,CAAC,EAAE,CAAC,GAAG,GAAG,GAAI,IAAI,CAAC,EAAE,CAAC,QAAQ,CAAC,EAAE,CAAC;SACvD,CAAC;IACJ,CAAC;;IAjIU,mBAAmB;QAD/B,gEAAU,EAAE;;OACA,mBAAmB,CAkI/B;IAAD,0BAAC;CAAA;AAlI+B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACTW;AACO;AACyB;AAErC;AACP;AAI/B;IAOE,2BAAqB,IAAgB;QAAhB,SAAI,GAAJ,IAAI,CAAY;QAL7B,QAAG,GAAW,wBAAwB,CAAC;QAGvC,SAAI,GAAG,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAC,CAAC;QAG5B,IAAI,CAAC,QAAQ,GAAG,IAAI,sFAAmB,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC,CAAI,yBAAyB;QACjF,mGAAmG;QAClG,IAAI,CAAC,IAAI,EAAE,CAAC;QACd,IAAI,CAAC,QAAQ,EAAE,CAAC;IAClB,CAAC;IAEM,iCAAK,GAAZ,UAAa,IAAU;QACrB,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAM,IAAI,CAAC,GAAG,GAAG,QAAQ,EAAE,IAAI,CAAC,CAAC;IACxD,CAAC;IAEM,oCAAQ,GAAf,UAAgB,KAAa;QAC3B,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;IACrB,CAAC;IAEY,oCAAQ,GAArB;;;;gBACE,IAAI,CAAC,IAAI,CAAC,GAAG,CAAM,IAAI,CAAC,GAAG,GAAG,OAAO,CAAC,CAAC,SAAS,CAAC,eAAK;oBACpD,KAAI,CAAC,IAAI,GAAG,KAAK,CAAC;oBAClB,KAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,KAAI,CAAC,IAAI,CAAC,CAAC,EAAE,KAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;gBAClD,CAAC,CAAC,CAAC;;;;KACJ;IAEY,mCAAO,GAApB;;;;;;;wBACE,qFAAqF;wBAErF,eAAI,CAAC,IAAI,EAAC,IAAI;8BAAM,IAAI,CAAC,GAAG,GAAG,MAAM;wBAAE,qBAAM,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE;;wBAFrE,qFAAqF;wBAErF,wBAAuC,SAA8B,GAAE,CAAC,SAAS,CAAC,eAAK;4BACrF,KAAI,CAAC,IAAI,GAAG,KAAK,CAAC;4BAClB,OAAO,CAAC,GAAG,CAAC,SAAS,EAAE,KAAI,CAAC,IAAI,CAAC,CAAC;4BAClC,KAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,KAAI,CAAC,IAAI,CAAC,CAAC,EAAE,KAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;wBAClD,CAAC,CAAC,CAAC;wBACH,sBAAO,IAAI,CAAC,QAAQ,CAAC,UAAU,EAAE,EAAC;;;;KACnC;IAEM,wCAAY,GAAnB,UAAoB,QAAgB;QAClC,IAAM,SAAS,GAAG,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,QAAQ,CAAC,EAAE,CAAC,GAAG,GAAG,GAAG,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;QACtF,IAAM,UAAU,GAAG,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,QAAQ,CAAC,EAAE,CAAC,GAAG,GAAG,GAAG,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;QAEvF,IAAM,OAAO,GAAG,mCAAK,CAAC,QAAQ,CAAC,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;QAEhE,IAAM,IAAI,GAAG;YACX,SAAS,EAAE,SAAS;YACpB,aAAa,EAAE,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,UAAU,EAAE,QAAQ,CAAC;YAC7D,QAAQ,EAAE,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAE,wCAAM,CAAC,OAAO,EAAE,EAAE,CAAC,EAAE,QAAQ,CAAE,CAAC,QAAQ,CAAC,EAAE,CAAC;YAC/E,KAAK,EAAE,IAAI,CAAC,KAAK;SAClB,CAAC;QAEF,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAM,IAAI,CAAC,GAAG,GAAG,cAAc,EAAE,IAAI,CAAC;IAC7D,CAAC;IAEM,2CAAe,GAAtB,UAAuB,QAAgB;QAAvC,iBAaC;QAZC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAM,IAAI,CAAC,GAAG,GAAG,cAAc,EAAE,EAAE,KAAK,EAAE,IAAI,CAAC,KAAK,EAAE,CAAC,CAAC,SAAS,CAAC,kBAAQ;YACtF,IAAM,SAAS,GAAI,QAAQ,CAAC,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;YACtD,IAAM,UAAU,GAAG,KAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,QAAQ,CAAC,IAAI,CAAC,aAAa,EAAE,QAAQ,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;YAE9F,wBAAwB;YACxB,KAAI,CAAC,QAAQ,CAAC,EAAE,GAAG,wCAAM,CAAC,SAAS,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;YAC5C,KAAI,CAAC,QAAQ,CAAC,EAAE,GAAG,wCAAM,CAAC,SAAS,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;YAC5C,KAAI,CAAC,QAAQ,CAAC,EAAE,GAAG,wCAAM,CAAC,UAAU,CAAC,CAAC,CAAC,EAAC,EAAE,CAAC,CAAC;YAE5C,YAAY;YACZ,OAAO,KAAI,CAAC,QAAQ,CAAC,WAAW,CAAE,wCAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,QAAQ,EAAE,EAAE,CAAC,EAAE,QAAQ,CAAE,CAAC;QACnF,CAAC,CAAC,CAAC;IACL,CAAC;IAEM,mCAAO,GAAd,UAAe,OAAe,EAAE,QAAgB,EAAE,SAAS;QACzD,IAAG,CAAC,SAAS,EAAE;YACb,SAAS,GAAG,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,QAAQ,CAAC,EAAE,CAAC,GAAG,GAAG,GAAG,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;SACjF;QACD,OAAO,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;QACvB,yFAAyF;QACzF,IAAM,IAAI,GAAG,mCAAK,CAAC,QAAQ,CAAC,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;QAE7D,IAAM,OAAO,GAAG,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAE,wCAAM,CAAC,OAAO,EAAE,EAAE,CAAC,EAAE,QAAQ,CAAE,CAAC;QAC3E,IAAM,MAAM,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;QAC1D,OAAO,CAAC,GAAG,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;QAC1B,IAAG,IAAI,KAAK,MAAM;YAAE,OAAO,OAAO,CAAC;;YAC9B,OAAO,IAAI,CAAC;IACnB,CAAC;IAEM,sCAAU,GAAjB,UAAkB,OAAe,EAAE,QAAgB;QACjD,OAAO,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAC,CAAC;IAChF,CAAC;IAED,gCAAI,GAAJ;QACE,OAAO,CAAC,GAAG,CAAC,kBAAkB,CAAC,CAAC;QAEhC,IAAI,MAAM,GAAG,IAAI,sFAAmB,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;QAClD,IAAI,MAAM,GAAG,IAAI,sFAAmB,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;QAElD,MAAM,CAAC,OAAO,CAAE,MAAM,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,EAAE,CAAC,EAAE,MAAM,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAE,CAAC;QACrF,MAAM,CAAC,OAAO,CAAE,MAAM,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,EAAE,CAAC,EAAE,MAAM,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAE,CAAC;QAErF,IAAI,OAAO,GAAG,MAAM,CAAC;QACrB,OAAO,CAAC,GAAG,CAAC,WAAW,GAAG,OAAO,CAAC,CAAC;QACnC,yIAAyI;QACzI,IAAI,OAAO,GAAG,MAAM,CAAC,OAAO,CAAE,wCAAM,CAAC,MAAM,CAAC,WAAW,CAAC,OAAO,CAAC,EAAE,EAAE,CAAC,CAAE,CAAC;QACxE,OAAO,CAAC,GAAG,CAAC,WAAW,GAAG,OAAO,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;QAEhD,IAAI,OAAO,GAAG,MAAM,CAAC,WAAW,CAAE,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAE,CAAC;QACzE,OAAO,CAAC,GAAG,CAAC,WAAW,GAAG,OAAO,CAAC,CAAC;QAEnC,yIAAyI;QACzI,OAAO,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC;QAE1B,IAAI,UAAU,GAAG,MAAM,CAAC,IAAI,CAAE,wCAAM,CAAE,MAAM,CAAC,WAAW,CAAC,OAAO,CAAC,EAAE,EAAE,CAAE,CAAE,CAAC;QAC1E,OAAO,CAAC,GAAG,CAAC,WAAW,GAAG,UAAU,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;QAEnD,IAAI,YAAY,GAAG,MAAM,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;QAC7C,OAAO,CAAC,GAAG,CAAC,WAAW,GAAG,MAAM,CAAC,WAAW,CAAE,YAAY,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAE,CAAC,CAAC;QAE3E,yIAAyI;QACzI,OAAO,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC;QAE1B,IAAI,KAAK,GAAG,MAAM,CAAC,SAAS,CAAE,wCAAM,CAAE,MAAM,CAAC,WAAW,CAAC,OAAO,CAAC,EAAE,EAAE,CAAE,EAAE,KAAK,CAAE,CAAC;QACjF,OAAO,CAAC,GAAG,CAAC,WAAW,GAAG,KAAK,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;QAE9C,IAAI,UAAU,GAAG,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACpC,OAAO,CAAC,GAAG,CAAC,WAAW,GAAG,UAAU,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;QAEnD,IAAI,OAAO,GAAG,MAAM,CAAC,WAAW,CAAE,UAAU,EAAE,KAAK,CAAE,CAAC;QACtD,OAAO,CAAC,GAAG,CAAC,WAAW,GAAG,OAAO,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;QAEhD,IAAI,YAAY,GAAG,MAAM,CAAC,WAAW,CAAE,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAE,CAAC;QAC7E,OAAO,CAAC,GAAG,CAAC,WAAW,GAAG,YAAY,CAAC,CAAC;QACxC,wIAAwI;QACxI,IAAI,GAAG,GAAG,MAAM,CAAC,UAAU,CAAC,WAAW,EAAE,MAAM,CAAC,CAAC;QACjD,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;QAEjB,IAAI,IAAI,GAAG,MAAM,CAAC,WAAW,CAAE,MAAM,CAAC,UAAU,CAAC,GAAG,EAAE,MAAM,CAAC,CAAE,CAAC;QAChE,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;QAGlB,IAAM,QAAQ,GAAG,KAAK,CAAC;QACvB,IAAM,SAAS,GAAG,MAAM,CAAC,EAAE,CAAC,QAAQ,CAAC,EAAE,CAAC,GAAG,GAAG,GAAG,MAAM,CAAC,EAAE,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;QACxE,IAAM,UAAU,GAAG,MAAM,CAAC,EAAE,CAAC,QAAQ,CAAC,EAAE,CAAC,GAAG,GAAG,GAAG,MAAM,CAAC,EAAE,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;QAEzE,OAAO,GAAG,mCAAK,CAAC,QAAQ,CAAC,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;QAE1D,IAAM,IAAI,GAAG;YACX,YAAY,EAAE,MAAM,CAAC,UAAU,CAAC,SAAS,EAAE,QAAQ,CAAC;YACpD,aAAa,EAAE,MAAM,CAAC,UAAU,CAAC,UAAU,EAAE,QAAQ,CAAC;YACtD,QAAQ,EAAE,MAAM,CAAC,SAAS,CAAE,wCAAM,CAAC,OAAO,EAAE,EAAE,CAAC,EAAE,QAAQ,CAAE,CAAC,QAAQ,CAAC,EAAE,CAAC;SACzE,CAAC;QAEF,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;IACpB,CAAC;IAxJU,iBAAiB;QAD7B,gEAAU,EAAE;yCAQgB,+DAAU;OAP1B,iBAAiB,CAyJ7B;IAAD,wBAAC;CAAA;AAzJ6B;AA+J9B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EA6CE;;;;;;;;;;;;;;;;;;;;;;;;;ACrNuC;AAIzC;IAGE;IAAe,CAAC;IAEhB,6BAAO,GAAP,UAAQ,IAAU;QAChB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;IACnB,CAAC;IAED,6BAAO,GAAP;QACE,OAAO,IAAI,CAAC,IAAI,CAAC;IACnB,CAAC;IAXU,WAAW;QADvB,gEAAU,EAAE;;OACA,WAAW,CAavB;IAAD,kBAAC;CAAA;AAbuB;;;;;;;;;;;;;ACJxB;AAAA;AAAA,gFAAgF;AAChF,0EAA0E;AAC1E,gEAAgE;AAEzD,IAAM,WAAW,GAAG;IACzB,UAAU,EAAE,KAAK;CAClB,CAAC;AAEF;;;;;;GAMG;AACH,mEAAmE;;;;;;;;;;;;;ACfnE;AAAA;AAAA;AAAA;AAAA;AAA+C;AAC4B;AAE9B;AACY;AAEzD,IAAI,qEAAW,CAAC,UAAU,EAAE;IAC1B,oEAAc,EAAE,CAAC;CAClB;AAED,gGAAsB,EAAE,CAAC,eAAe,CAAC,yDAAS,CAAC;KAChD,KAAK,CAAC,aAAG,IAAI,cAAO,CAAC,KAAK,CAAC,GAAG,CAAC,EAAlB,CAAkB,CAAC,CAAC","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","module.exports = \".spacer {\\n  flex: 1 1 auto;\\n}\\n.white{\\n  color: white;\\n}\\n\"","module.exports = \"<mat-toolbar color=\\\"primary\\\">\\n  <span>Smart Cities 2 - eVote</span>\\n  <span class=\\\"spacer\\\"></span>\\n  <a href=\\\"https://eetac.upc.edu/ca\\\" target=\\\"_blank\\\"><img src=\\\"../../assets/image.png\\\" height=\\\"50\\\" width=\\\"50\\\" style=\\\"margin-left: 0.5em; margin-right: 0.5em\\\"></a>\\n  <a href=\\\"https://github.com/alberti-tu/eVote-client\\\" target=\\\"_blank\\\"><button mat-button class=\\\"white\\\"><i class=\\\"fab fa-github\\\"></i> GitHub</button></a>\\n</mat-toolbar>\\n<router-outlet></router-outlet>\\n<!--<app-home></app-home>-->\\n\"","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent { }\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\n\nimport { HttpClientModule } from '@angular/common/http';\n\nimport { AppComponent } from './app.component';\nimport { HomeComponent } from './home/home.component';\n\nimport { CryptographyService } from './service/Cryptography/cryptography.service';\nimport { HttpClientService } from './service/HttpClient/http-client.service';\nimport { InitComponent } from './init/init.component';\nimport { DownloadCertificateComponent } from './certificate/download-certificate/download-certificate.component';\nimport { LoginComponent } from './certificate/login/login.component';\nimport {routing} from \"./app.routes\";\nimport {UserService} from \"./service/UserService\";\nimport {IdAnonimousComponent} from \"./certificate/id-anonimous/id-anonimous.component\";\nimport {BrowserAnimationsModule} from \"@angular/platform-browser/animations\";\nimport {\n  MatButtonModule, MatCardModule, MatIconModule, MatInputModule, MatSelectModule, MatSnackBarModule, MatTableModule,\n  MatTabsModule, MatToolbarModule\n} from \"@angular/material\";\nimport {\n  PizzaPartyComponent,\n  RecoverCertificateComponent\n} from './certificate/recover-certificate/recover-certificate.component';\n\n@NgModule({\n  declarations: [ AppComponent,\n    PizzaPartyComponent,\n    HomeComponent, InitComponent, IdAnonimousComponent, DownloadCertificateComponent, LoginComponent, RecoverCertificateComponent ],\n  imports: [ BrowserModule,\n    HttpClientModule,\n    FormsModule,\n    routing,\n    BrowserAnimationsModule,\n    MatInputModule,\n    MatButtonModule,\n    MatSelectModule,\n    MatIconModule,\n    MatTableModule,\n    MatTabsModule,\n    MatToolbarModule,\n    MatSnackBarModule,\n    MatCardModule],\n  providers: [ CryptographyService, HttpClientService, UserService ],\n  bootstrap: [ AppComponent ],\n  entryComponents: [PizzaPartyComponent ]\n\n})\nexport class AppModule { }\n","import {Routes, RouterModule} from '@angular/router';\nimport {HomeComponent} from \"./home/home.component\";\nimport {InitComponent} from \"./init/init.component\";\nimport {IdAnonimousComponent} from \"./certificate/id-anonimous/id-anonimous.component\";\nimport {DownloadCertificateComponent} from \"./certificate/download-certificate/download-certificate.component\";\nimport {LoginComponent} from \"./certificate/login/login.component\";\nimport {RecoverCertificateComponent} from \"./certificate/recover-certificate/recover-certificate.component\";\n\nconst routes: Routes = [\n  {\n    path: '', component: InitComponent\n  },\n  {\n    path: 'login', component: LoginComponent\n  },\n  {\n    path: 'id-anon', component: IdAnonimousComponent\n  },\n  {\n    path: 'down-cert', component: DownloadCertificateComponent\n  },\n  {\n    path: 'recover-cert', component: RecoverCertificateComponent\n  }\n];\nexport const routing = RouterModule.forRoot(routes);\n","module.exports = \"\"","module.exports = \"<div class=\\\"container\\\">\\n  <div class=\\\"row center\\\">\\n    <button mat-raised-button (click)=\\\"download()\\\">DESCARGAR CERTIFICADO</button>\\n  </div>\\n</div>\\n\"","import { Component, OnInit } from '@angular/core';\nimport {HttpClientService} from \"../../service/HttpClient/http-client.service\";\nimport {Router} from \"@angular/router\";\nimport {User} from \"../../models/user\";\nimport {UserService} from \"../../service/UserService\";\n\nimport { saveAs  } from 'file-saver';\n@Component({\n  selector: 'app-download-certificate',\n  templateUrl: './download-certificate.component.html',\n  styleUrls: ['./download-certificate.component.css']\n})\nexport class DownloadCertificateComponent implements OnInit {\n  user: User;\n  constructor(private http: HttpClientService,\n              private userService: UserService,\n              private router: Router) { }\n\n  ngOnInit() {\n    this.user = this.userService.getUser();\n    console.log(this.user);\n    if(!this.user || !this.user.name || this.user.name === '') {\n      this.router.navigate(['']);\n    }\n  }\n\n  download() {\n\n    /**\n     * HAY QUE PASAR UN PASSWORD AL UNBLIND\n     */\n\n    // Desencriptar AESprivateKey y AESpublicKey en privateKeyMod y publicKeyMod\n\n\n    let download = JSON.stringify({\n      privateIdentity: this.user.privateKeyMod,\n      publicIdentity: this.user.publicKeyMod,\n      firmIdentity: this.user.identity\n    });\n\n    const blob = new Blob([download], {type: \"text/plain;charset=utf-8\"});\n    saveAs(blob, \"hello world.txt\");\n  }\n\n}\n","module.exports = \"\"","module.exports = \"<div class=\\\"container\\\">\\n  <div class=\\\"row center\\\">\\n    <form (submit)=\\\"generateId(password.value)\\\">\\n      <mat-form-field class=\\\"example-width\\\">\\n        <input matInput type=\\\"password\\\" #password placeholder=\\\"Password\\\">\\n      </mat-form-field>\\n      <button mat-raised-button>Id Anonimo</button>\\n    </form>\\n  </div>\\n</div>\\n\"","import { Component, OnInit } from '@angular/core';\nimport {Router} from \"@angular/router\";\nimport {HttpClientService} from \"../../service/HttpClient/http-client.service\";\nimport {User} from \"../../models/user\";\nimport {UserService} from \"../../service/UserService\";\n\n\n@Component({\n  selector: 'app-id-anonimous',\n  templateUrl: './id-anonimous.component.html',\n  styleUrls: ['./id-anonimous.component.css']\n})\nexport class IdAnonimousComponent implements OnInit {\n\n  user: User = new User();\n  //wait: boolean = false;\n\n  constructor(private router: Router,\n              private http: HttpClientService,\n              private userService: UserService,\n              ) {\n  }\n\n  ngOnInit() {\n    this.user = this.userService.getUser();\n    if(!this.user || !this.user.name || this.user.name === '') {\n      this.router.navigate(['']);\n    }\n  }\n\n  generateId(password: string) : void {\n    // this.wait = true;\n    // this.http.encryptPrivate(this.cryptoservice.stringToHex(this.user.name));\n    // this.user.certificate = password;\n    this.http.sendIdentity(password).subscribe(signed => {\n      if (signed) {\n        console.log(signed);\n\n        this.user.identity = this.http.unblind( signed.identity, password ,null).toString(16);\n        this.user.passwordID = password;\n\n        console.log( this.user.identity );\n\n        this.userService.setUser( this.user );\n        this.router.navigate(['down-cert']);\n      }\n      //this.wait = false;\n    });\n  }\n\n}\n","module.exports = \"\"","module.exports = \"<div class=\\\"container\\\">\\n  <div class=\\\"row center\\\">\\n    <form (submit)=\\\"enter(login.value, password.value)\\\" class=\\\"example-form\\\">\\n      <mat-form-field class=\\\"example-width\\\">\\n        <input matInput type=\\\"text\\\" #login placeholder=\\\"Login\\\">\\n      </mat-form-field>\\n      <mat-form-field class=\\\"example-width\\\">\\n        <input matInput type=\\\"password\\\" #password placeholder=\\\"Password\\\">\\n      </mat-form-field>\\n      <button mat-raised-button>Login</button>\\n    </form>\\n  </div>\\n</div>\\n\"","import { Component, OnInit } from '@angular/core';\nimport {Router} from \"@angular/router\";\nimport {HttpClientService} from '../../service/HttpClient/http-client.service';\nimport {UserService} from \"../../service/UserService\";\nimport {CryptographyService} from '../../service/Cryptography/cryptography.service';\nimport {User} from \"../../models/user\";\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\n\nexport class LoginComponent implements OnInit {\n\n  user: User = new User();\n\n  constructor(private router: Router,\n              private http: HttpClientService,\n              private userService: UserService) {\n  }\n\n  ngOnInit() { }\n\n  enter(login: string, password: string) : void {\n    this.user.name = login;\n    this.user.password = password;\n    this.http.login(this.user).subscribe(async response => {\n      console.log(response);\n      this.user = response.findUser;\n      console.log(this.user);\n      if(!this.user.AESprivateKey || !this.user.publicKey) {\n        const t = await this.http.setKeys();\n        this.user.publicKeyMod = t.pm;\n        this.user.privateKeyMod = t.dm;\n      }\n      console.log(this.user);\n      this.userService.setUser(this.user);\n      this.http.setToken(response.token);\n      //const t = this.cryptoprivate.keystouser();\n      //this.userService.setkeys(t.d, t.pm);\n\n      if(this.user.identity) {\n        this.router.navigate(['recover-cert']);\n      } else {\n        this.router.navigate(['id-anon']);\n      }\n    });\n  }\n}\n","module.exports = \"\"","module.exports = \"<div class=\\\"container\\\">\\n  <div class=\\\"row center\\\">\\n    <mat-form-field class=\\\"example-width\\\">\\n      <input matInput type=\\\"password\\\" #password placeholder=\\\"Password\\\">\\n    </mat-form-field>\\n    <button mat-raised-button (click)=\\\"recover(password.value)\\\">RECUPERAR PASSWORD</button>\\n  </div>\\n</div>\\n\"","import {Component, Inject, OnInit} from '@angular/core';\nimport {UserService} from \"../../service/UserService\";\nimport {User} from \"../../models/user\";\nimport {Router} from \"@angular/router\";\nimport {CryptographyService} from \"../../service/Cryptography/cryptography.service\";\nimport {MAT_SNACK_BAR_DATA, MatSnackBar} from \"@angular/material\";\nimport {HttpClientService} from \"../../service/HttpClient/http-client.service\";\n\n@Component({\n  selector: 'app-recover-certificate',\n  templateUrl: './recover-certificate.component.html',\n  styleUrls: ['./recover-certificate.component.css']\n})\nexport class RecoverCertificateComponent implements OnInit {\n\n  user: User;\n\n  constructor(private userService: UserService,\n              public snackBar: MatSnackBar,\n              private http: HttpClientService,\n              private router: Router) {\n    this.user = this.userService.getUser();\n    if(!this.user || !this.user.name || this.user.name === '') {\n      this.router.navigate(['']);\n    }\n  }\n\n  ngOnInit() {\n  }\n\n  recover(password: string) {\n    this.user.passwordID = password;\n    const publicKey  = this.user.publicKey;\n    const unblinded = this.http.unblind(this.user.identity, password, publicKey);\n    console.log(unblinded);\n\n\n    if(!unblinded) {\n      this.snackBar.openFromComponent(PizzaPartyComponent, {\n        duration: 10000,\n      });\n    } else {\n      const privateKey = this.http.decryptAES(this.user.AESprivateKey, password);\n      console.log(publicKey, privateKey);\n      this.user.privateKeyMod = privateKey;\n      this.user.publicKeyMod = publicKey;\n      this.user.identity = unblinded.toString(16);\n      this.userService.setUser(this.user);\n\n      this.router.navigate(['down-cert']);\n    }\n  }\n\n}\n\n@Component({\n  selector: 'snack-bar-component-example-snack',\n  templateUrl: 'snack-bar-component-example-snack.html',\n  styles: [`\n    .example-pizza-party {\n      color: hotpink;\n    }\n  `],\n})\nexport class PizzaPartyComponent {\n  constructor(@Inject(MAT_SNACK_BAR_DATA) public data: any) {\n  }\n}\n","module.exports = \"<span class=\\\"example-pizza-party\\\">\\n  Wrong password\\n</span>\\n\"","module.exports = \"\"","module.exports = \"<div>\\n  <form (submit)=\\\"send(message.value, select.value)\\\">\\n    <label><input #message placeholder=\\\"Message\\\"></label>\\n    <label><select #select>\\n      <option *ngFor=\\\"let item of list\\\" [value]=\\\"item.id\\\">{{item.name}}</option>\\n    </select></label>\\n    <button>Send</button>\\n  </form>\\n\\n  <label>{{answer}}</label>\\n</div>\\n\"","import { Component, OnInit } from '@angular/core';\nimport { HttpClientService } from \"../service/HttpClient/http-client.service\";\n\n@Component({\n  selector: 'app-home',\n  templateUrl: './home.component.html',\n  styleUrls: ['./home.component.css']\n})\n\nexport class HomeComponent implements OnInit {\n\n  answer: string;\n\n  constructor( private http: HttpClientService ) { }\n\n  ngOnInit() {  }\n\n  list: any = [\n    { id: 0, name: 'Encrypt' },\n    { id: 1, name: 'Encrypt & Sign' },\n    { id: 2, name: 'Sign' },\n  ];\n\n  send(message: string, select: string): void {\n    switch ( parseInt(select) ) {\n      case 0:\n\n      break;\n      case 1:\n\n      break;\n      case 2:\n\n      break;\n    }\n  }\n}\n\n\n/*\n  answer: string;\n\n  constructor( private http: HttpClientService ) { }\n\n  ngOnInit() {  }\n\n  list: any = [\n    { id: 0, name: 'Encrypt' },\n    { id: 1, name: 'Encrypt & Sign' },\n    { id: 2, name: 'Sign' },\n  ];\n\n  send(message: string, select: string): void {\n    switch ( parseInt(select) ) {\n      case 0:\n        this.http.encrypt(message).subscribe(response => {\n          this.answer = this.http.decrypt( response );\n        });\n      break;\n      case 1:\n        this.http.signEncrypted(message).subscribe( response => {\n          if(this.http.verifyDecrypted(response) == true) { this.answer = 'Server: verified' }\n          else { this.answer = 'Server: not verified' }\n        });\n      break;\n      case 2:\n        this.http.sign(message).subscribe( response => {\n          if(this.http.verify(response) == true){ this.answer = 'Server: verified' }\n          else { this.answer = 'Server: not verified' }\n        });\n      break;\n    }\n  }*/\n","module.exports = \"\"","module.exports = \"<div class=\\\"container\\\">\\n  <div class=\\\"row center\\\">\\n    <button mat-raised-button (click)=\\\"goToLogin()\\\">GENERAR CERTIFICADO</button> &nbsp;\\n    <button mat-raised-button>VOTACIONES</button>\\n  </div>\\n</div>\\n\\n\"","import { Component, OnInit } from '@angular/core';\nimport {Router} from \"@angular/router\";\n\n@Component({\n  selector: 'app-init',\n  templateUrl: './init.component.html',\n  styleUrls: ['./init.component.css']\n})\nexport class InitComponent implements OnInit {\n\n  constructor(private router: Router) { }\n\n  ngOnInit() {\n  }\n\n  goToLogin() {\n    this.router.navigate(['login']);\n  }\n\n}\n","export class User {\n  name: String;\n  password: String;\n  passwordID: String;\n  identity: string;\n  AESprivateKey: string;\n  publicKey: any;\n  publicKeyMod: String;\n  privateKeyMod: String;\n}\n","import { Injectable } from '@angular/core';\n// @ts-ignore\nimport { Buffer } from 'buffer';\nimport * as shajs from 'sha.js';\nimport * as bigInt from 'big-integer';\nimport { BigInteger } from 'big-integer';\nimport CryptoJS from 'crypto-js'\n\n@Injectable()\nexport class CryptographyService {\n\n  public bits: number;\n  public _e: BigInteger;             // Client's public exponent\n  public _n: BigInteger;             // Client's public modulus\n  public _d: BigInteger;             // Client's private key\n  public e: BigInteger;              // Server's public exponent\n  public n: BigInteger;              // Server's public modulus\n\n  constructor ( bits: number, e: number ) {\n    this.bits = bits;\n    this._e = bigInt(e);\n\n    this.newKey();\n  }\n\n  static primeGenerator(bits: number): BigInteger {\n    const max = bigInt(2).pow(bits).subtract(1);\n    const min = bigInt(2).pow(bits - 1);\n\n    let prime;\n    do {\n      prime = bigInt.randBetween(min, max);\n    }\n    while (prime.isProbablePrime() !== true);\n\n    return prime;\n  }\n\n  public newKey() {\n    if(this.bits < 256) {\n      console.error('ERROR: public modulus very small, more bits are needed');\n      return;\n    }\n\n    let _p, _q;\n    do {\n      _p = CryptographyService.primeGenerator(this.bits/2);\n      _q = CryptographyService.primeGenerator(this.bits/2);\n    } while (_p.multiply(_q) < bigInt(2).pow(this.bits).divide(2));\n\n    // phi = (p-1)(q-1)\n    const phi = _p.subtract(1).multiply( _q.subtract(1) );\n\n    this._n = bigInt(_p).multiply(_q);\n    this._d = bigInt(this._e).modInv(phi);\n\n    console.log('Generated RSA keys of ' + this._n.bitLength() + ' bits');\n  }\n\n  //Return the public keys\n  public sendKeys() {\n    return { e: this._e, n: this._n };\n  }\n\n  //Set the keys of the another instance\n  public setKeys(n, e) {\n    this.n = bigInt(n, 16);\n    this.e = bigInt(e, 16);\n\n    console.log(\"Server's keys are correctly configured\");\n  }\n\n  public encrypt(message: BigInteger): BigInteger {\n    return message.modPow(this.e, this.n);\n  }\n\n  public decrypt(message: BigInteger): BigInteger {\n    return message.modPow(this._d, this._n);\n  }\n\n  public sign(message: BigInteger): BigInteger {\n    return message.modPow(this._d, this._n);\n  }\n\n  public verify(message: BigInteger): BigInteger {\n    return message.modPow(this.e, this.n);\n  }\n\n  public blindSign(message: BigInteger, password: string): BigInteger {\n    const hash1 = shajs('sha256').update(password).digest('hex');\n    const hash2 = shajs('sha256').update(hash1).digest('hex');\n    const hash3 = shajs('sha256').update(hash2).digest('hex');\n    const hash4 = shajs('sha256').update(hash3).digest('hex');\n\n    let k = bigInt(hash4 + hash3 + hash2 + hash1, 16);\n\n    do {\n      k = k.add(1);\n    } while (bigInt.gcd(k, this.n).toString() != '1');\n\n    return message.multiply( bigInt(k).modPow(this.e, this.n) ).mod(this.n);\n  }\n\n  public unBlindSign(message: BigInteger, password: string): BigInteger {\n    const hash1 = shajs('sha256').update(password).digest('hex');\n    const hash2 = shajs('sha256').update(hash1).digest('hex');\n    const hash3 = shajs('sha256').update(hash2).digest('hex');\n    const hash4 = shajs('sha256').update(hash3).digest('hex');\n\n    let k = bigInt(hash4 + hash3 + hash2 + hash1, 16);\n\n    do {\n      k = k.add(1);\n    } while (bigInt.gcd(k, this.n).toString() != '1');\n\n    return message.multiply(k.modInv(this.n)).mod(this.n);\n  }\n\n  public encryptAES(message: string, password: string): string {\n    return CryptoJS.AES.encrypt(message, password).toString();\n  }\n\n  public decryptAES(message: string, password: string): string {\n    return CryptoJS.AES.decrypt(message, password).toString();\n  }\n\n  public stringToHex(message: string) {\n    return Buffer.from(message).toString('hex');\n  }\n\n  public hexToString(message: string) {\n    return Buffer.from(message, 'hex').toString('ascii');\n  }\n  public keysToUser() {\n    return {\n      dm: this._d.toString(16)+ '.' +  this._n.toString(16) ,\n      pm: this._e.toString(16) + '.' +  this._n.toString(16)\n    };\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { CryptographyService } from '../Cryptography/cryptography.service';\nimport { User } from \"../../models/user\";\nimport * as bigInt from 'big-integer';\nimport * as shajs from 'sha.js'\n\n\n@Injectable()\nexport class HttpClientService {\n\n  private url: string = 'https://localhost:3000';\n  private token: string;\n  private security: CryptographyService;\n  private keys = { n: '', e: ''};\n\n  constructor( private http: HttpClient ) {\n     this.security = new CryptographyService(512, 65537);    // Generates the RSA keys\n     // this.setKeys();                                         // Exchange the RSA keys with the server\n      this.test();\n    this.takeKeys();\n  }\n\n  public login(user: User) {\n    return this.http.post<any>(this.url + '/login', user);\n  }\n\n  public setToken(token: string) {\n    this.token = token;\n  }\n\n  public async takeKeys() {\n    this.http.get<any>(this.url + '/keys').subscribe(value => {\n      this.keys = value;\n      this.security.setKeys(this.keys.n, this.keys.e);\n    });\n  }\n\n  public async setKeys(): Promise <{dm: string, pm: string}> {\n    // this.security = new CryptographyService(1024, 65537);    // Generates the RSA keys\n\n    this.http.post<any>(this.url + '/rsa', await this.security.sendKeys() ).subscribe(value => {\n      this.keys = value;\n      console.log('clavees', this.keys);\n      this.security.setKeys(this.keys.n, this.keys.e);\n    });\n    return this.security.keysToUser();\n  }\n\n  public sendIdentity(password: string) {\n    const publicKey = this.security._e.toString(16) + '.' + this.security._n.toString(16);\n    const privateKey = this.security._d.toString(16) + '.' + this.security._n.toString(16);\n\n    const message = shajs('sha256').update(publicKey).digest('hex');\n\n    const body = {\n      publicKey: publicKey,\n      AESprivateKey: this.security.encryptAES(privateKey, password),\n      identity: this.security.blindSign( bigInt(message, 16), password ).toString(16),\n      token: this.token\n    };\n\n    return this.http.post<any>(this.url + '/rsa/id/save', body)\n  }\n\n  public recieveIdentity(password: string) {\n    this.http.post<any>(this.url + '/rsa/id/save', { token: this.token }).subscribe(response =>{\n      const publicKey  = response.body.publicKey.split('.');\n      const privateKey = this.security.decryptAES(response.body.AESprivateKey, password).split('.');\n\n      // Set the Client's Keys\n      this.security._e = bigInt(publicKey[0], 16);\n      this.security._n = bigInt(publicKey[1], 16);\n      this.security._d = bigInt(privateKey[0],16);\n\n      //unblind ID\n      return this.security.unBlindSign( bigInt(response.body.identity, 16), password );\n    });\n  }\n\n  public unblind(message: string, password: string, publicKey){\n    if(!publicKey) {\n      publicKey = this.security._e.toString(16) + '.' + this.security._n.toString(16);\n    }\n    console.log(publicKey);\n    // const publicKey = this.security._e.toString(16) + '.' + this.security._n.toString(16);\n    const hash = shajs('sha256').update(publicKey).digest('hex');\n\n    const unblind = this.security.unBlindSign( bigInt(message, 16), password );\n    const verify = this.security.verify(unblind).toString(16);\n    console.log(hash, verify);\n    if(hash === verify) return unblind;\n    else return null;\n  }\n\n  public decryptAES(message: string, password: string) {\n    return this.security.hexToString(this.security.decryptAES(message, password));\n  }\n\n  test() {\n    console.log('TEST: Blind Sign');\n\n    let client = new CryptographyService(1024, 65537);\n    let server = new CryptographyService(1024, 65537);\n\n    client.setKeys( server.sendKeys().n.toString(16), server.sendKeys().e.toString(16) );\n    server.setKeys( client.sendKeys().n.toString(16), client.sendKeys().e.toString(16) );\n\n    let message = 'hola';\n    console.log('message: ' + message);\n    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n    let encrypt = client.encrypt( bigInt(client.stringToHex(message), 16) );\n    console.log('Encrypt: ' + encrypt.toString(16));\n\n    let decrypt = server.hexToString( server.decrypt(encrypt).toString(16) );\n    console.log('Decrypt: ' + decrypt);\n\n    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n    console.log('Clear Sign');\n\n    let sign_clear = server.sign( bigInt( server.stringToHex(message), 16 ) );\n    console.log('Sign:    ' + sign_clear.toString(16));\n\n    let verify_clear = client.verify(sign_clear);\n    console.log('clear:   ' + client.hexToString( verify_clear.toString(16) ));\n\n    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n    console.log('Blind Sign');\n\n    let blind = client.blindSign( bigInt( client.stringToHex(message), 16 ), '123' );\n    console.log('Blind:   ' + blind.toString(16));\n\n    let sign_blind = server.sign(blind);\n    console.log('Sign:    ' + sign_blind.toString(16));\n\n    let unblind = client.unBlindSign( sign_blind, '123' );\n    console.log('Unblind: ' + unblind.toString(16));\n\n    let verify_blind = client.hexToString( client.verify(unblind).toString(16) );\n    console.log('clear:   ' + verify_blind);\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n    let AES = client.encryptAES('asd213asd', '1234');\n    console.log(AES);\n\n    let AES2 = client.hexToString( client.decryptAES(AES, '1234') );\n    console.log(AES2);\n\n\n    const password = '123';\n    const publicKey = client._e.toString(16) + '.' + client._n.toString(16);\n    const privateKey = client._d.toString(16) + '.' + client._n.toString(16);\n\n    message = shajs('sha256').update(publicKey).digest('hex');\n\n    const body = {\n      AESpublicKey: client.encryptAES(publicKey, password),\n      AESprivateKey: client.encryptAES(privateKey, password),\n      identity: client.blindSign( bigInt(message, 16), password ).toString(16)\n    };\n\n    console.log(body);\n  }\n}\n\n\n\n\n\n/*\n  public encrypt(message: string) {\n    let msg = this.security.stringToHex(message);\n    let body = this.security.encrypt( bigInt(msg, 16) ).toString(16);\n    // @ts-ignore\n    return this.http.post<any>(this.url + '/rsa/decrypt', body, {responseType: 'text'});\n  }\n\n  public decrypt (message: string): string {\n    let msg = this.security.decrypt( bigInt(message, 16) ).toString(16);\n    return this.security.hexToString(msg);\n  }\n\n  public signEncrypted (message: string) {\n    let msg = this.security.stringToHex(message);\n    let body = this.security.encrypt( bigInt(msg, 16) ).toString(16) + '.' + this.security.sign( bigInt(msg, 16) ).toString(16);\n    // @ts-ignore\n    return this.http.post<any>(this.url + '/rsa/decrypt/verify', body, {responseType: 'text'});\n  }\n\n  public verifyDecrypted (message: string): boolean {\n    let request = message.split('.');\n\n    let msg = this.security.decrypt( bigInt(request[0], 16) ).toString(16);\n\n    let digest = shajs('sha256').update( this.security.hexToString(msg) ).digest('hex');\n    let verify = this.security.verify( bigInt(request[1], 16) ).toString(16);\n\n    return digest === verify;\n  }\n\n    public sign(message: string) {\n    let digest = shajs('sha256').update(message).digest('hex');\n    let body = message + '.' + this.security.sign( bigInt(digest, 16) ).toString(16);\n    // @ts-ignore\n    return this.http.post<any>(this.url + '/rsa/verify', body, {responseType: 'text'});\n  }\n\n  public verify(message: string): boolean {\n    let request = message.split('.');\n    let digest = shajs('sha256').update(request[0]).digest('hex');\n    let verify = this.security.verify( bigInt(request[1], 16) ).toString(16);\n    return digest === verify;\n  }\n\n*/\n","import {Injectable} from \"@angular/core\";\nimport {User} from \"../models/user\";\n\n@Injectable()\nexport class UserService {\n\n  user: User;\n  constructor() {}\n\n  setUser(user: User) {\n    this.user = user;\n  }\n\n  getUser() : User {\n    return this.user;\n  }\n\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n\n"],"sourceRoot":""}